Dokumentasi Website ENTEN
Website: ENTEN
Tujuan: Website untuk presensi online SDN Gen Gold
Teknologi: React + Vite, Tailwind, React Router, Firebase, Axios
Struktur Proyek: Terdiri dari folder backend dan frontend

1. Deskripsi
	ENTEN adalah sebuah aplikasi web yang digunakan untuk melakukan presensi online di SDN Gen Gold. Website ini dirancang untuk mempermudah proses absensi siswa dan guru di sekolah, serta memungkinkan akses yang lebih cepat dan efisien. Website ini dibangun menggunakan React dengan Vite sebagai bundler, Tailwind untuk styling, Firebase untuk penyimpanan data, dan Axios untuk komunikasi dengan backend.

2. struktur Folder
	A. Frontend
**FINAL PROJECT/**
├── public/
├── src/
│   ├── components/
│   │   ├── NavbarAdmin.jsx
│   │   ├── NavbarUser.jsx
│   │   ├── StudentList.jsx
│   ├── pages/
│   │   ├── Register/
│   │   │   └── register.jsx
│   │   ├── Login.jsx
│   │   ├── AdminDashboard.jsx
│   │   ├── AdminManageStudents.jsx
│   │   ├── AdminManageAttendance.jsx
│   │   ├── AdminProfile.jsx
│   │   ├── UserHome.jsx
│   │   ├── UserProfile.jsx
│   │   ├── UserAttendance.jsx
│   │   └── UserHistory.jsx
│   ├── App.jsx
│   ├── App.css
│   ├── axiosConfig.css
│   ├── firebase.css
│   ├── index.js
│   ├── index.css
│   ├── main.css
├── .gitignore
├── package.json
├── postcss.config.js
├── tailwind.config.js
└── README.md
	
	B. Backend
**BACKEND/**
├── controllers/
│   └── studentController.js
├── routes/
│   └── studentRoutes.js
├── final-project-f10b3-firebase-adminsdk-tfo20-eb264bf037.json
├── package-lock.json
├── package.json
└── server.js

3. Fitur Aplikasi
I.   Presensi Online: Memungkinkan siswa dan guru untuk melakukan presensi dengan mudah melalui aplikasi web.
II.  Autentikasi Pengguna: Menggunakan Firebase Authentication untuk melakukan login dan registrasi.
III. Data Siswa: Data presensi disimpan dan dikelola melalui Firebase Firestore.
IV.  Responsive Design: Menggunakan Tailwind CSS untuk memastikan tampilan aplikasi responsif dan dapat diakses dengan nyaman di perangkat apapun.
V.   Menampilkan jumlah total siswa.
4. Instalasi dan Setup
Frontend
A. Install dan Setup Vite dan React
- npm create vite@latest > tulis nama project > pilih react > pilih javascritp
- cd (nama-project)
B. Install dan Setup Tailwind
Instalasi
- npm install -D tailwindcss postcss autoprefixer
- npx tailwindcss init -p
Setup
- Konfigurasi tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

- Setup Tailwind di CSS:
@tailwind base;
@tailwind components;
@tailwind utilities;

C. Install dan Setup React Router
Instalasi
npm install react-router-dom

Setup
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </Router>
  );
}

export default App;

D. Install dan Setup Firebase
Instalasi:
npm install firebase


Setup:
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

export { db, auth };

E. Install dan Setup Axious untuk HTTP Request
Instalasi:
npm install axios

Setup:
import axios from "axios";

const axiosInstance = axios.create({
  baseURL: "http://localhost:5000", // Ubah dengan URL backend Anda
  timeout: 10000,
});

export default axiosInstance;

API Endpoint yang Digunakan
GET /api/students: Mengambil daftar siswa.

F. Jalankan Frontend
- npm run dev

Backend
A. Install Project Backend:
- npm init -y
- npm install express firebase-admin
B. Jalankan Backend:
- npm run dev


5. Penggunaan API
const response = await axios.get("http://localhost:5000/api/students");
const students = response.data;
setTotalStudents(students.length);

	Kode ini melakukan permintaan GET ke http://localhost:5000/api/students untuk mengambil data siswa dari server. Data yang dikembalikan dari API kemudian disimpan ke dalam state totalStudents.
6. Autentifikasi
Firebase Authentication dan Firebase Firestore untuk menangani proses login pengguna serta pengelolaan peran mereka

Setelah mendapatkan data pengguna dari Firestore, kode memeriksa peran pengguna (role) dan mengarahkan pengguna ke halaman yang sesuai:
if (role === "admin") {
  navigate("/admin/dashboard");
} else if (role === "user") {
  navigate("/home");
} else {
  setError("Invalid role assigned.");
}

7.Firebase Setup







